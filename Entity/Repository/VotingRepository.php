<?php
namespace Aristos\CoreBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use General\GeneralBundle\GeneralGeneralBundle;

/**
 * VotingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VotingRepository extends EntityRepository
{
	
	/*
	 * check if current user voted for this question
	
	public function getVoting($questionid, $userid)
	{
		$qb = $this->createQueryBuilder('q')
		->select('q')
		->where('q.questionid = :questionid')
		->andWhere('q.userid = :userid')
		->setParameter('questionid', $questionid)
		->setParameter('userid', $userid)
		->getQuery()
		->getArrayResult();
		 
		return $qb;
		 
	}*/
	
	
	/*
	 * check if current user already voted for this encounter question
	*/
	public function getEncounterQuestionVoting($questionid, $userid)
	{
		$qb = $this->createQueryBuilder('q')
		->select('q')
		->where('q.encounterquestionid = :questionid')
		->andWhere('q.user_voting_id = :userid')
		->setParameter('questionid', $questionid)
		->setParameter('userid', $userid)
		->getQuery()
		->getArrayResult();
			
		return $qb;
			
	}
	/*
	 * check if current user voted for this answer
	
	public function getAnswerVoting($answerid, $userid)
	{
		$qb = $this->createQueryBuilder('q')
		->select('q')
		->where('q.answerid = :answerid')
		->andWhere('q.userid = :userid')
		->setParameter('answerid', $answerid)
		->setParameter('userid', $userid)
		->getQuery()
		->getArrayResult();
			
		return $qb;
			
	}*/
	
	/*
	 * get total votes casted by user
	*/
	public function getTotalVotesCasted($userid)
	{
		$qb = $this->createQueryBuilder('Voting')
		->select('SUM(Voting.votes) as votes')
		->where('Voting.user_voting_id = :userid')
		->setParameter('userid', $userid)
		->getQuery()->execute();
		return $qb[0]['votes'];			
	}
	
	
	/*
	 * get total votes received for answers for questions by userid
	*/
	public function getTotalAnswerVotesReceivedForQuestion($userid)
	{
	
		$qb = $this->getEntityManager()
		->createQuery('	SELECT SUM( v.votes ) as votessum
				FROM  AristosCoreBundle:User u,  GeneralGeneralBundle:AnswerForQuestion a, GeneralGeneralBundle:Voting v
				WHERE u.id ='.$userid.
				'AND u.id = a.user_id
				AND a.id = v.answer_id')
					->getArrayResult();
	
		
		if(empty($qb[0]['votessum']))
			return 0;
		
		return $qb[0]['votessum'];
	
	}
	
	/*
	 * get total votes received for answers for encounter questions by userid
	*/
	public function getTotalAnswerVotesReceivedForEncounterQuestion($userid)
	{
	
		$qb = $this->getEntityManager()
		->createQuery('	SELECT SUM( v.votes ) as votessum
				FROM  AristosCoreBundle:User u,  GeneralGeneralBundle:AnswerForEncounterQuestion a, GeneralGeneralBundle:Voting v
				WHERE u.id ='.$userid.
				'AND u.id = a.user_id
				AND a.id = v.answer_id')
					->getArrayResult();
	
	
		if(empty($qb[0]['votessum']))
			return 0;
	
		return $qb[0]['votessum'];
	
	}
	
	/*
	 * get general votes, not from questions or answers, but from system rules
	*/
	public function getSystemVotesReceived($userid)
	{
	
		
	
		$qb = $this->getEntityManager()
		->createQuery('	SELECT SUM(votes ) as votessum
				FROM  GeneralGeneralBundle:Voting v
				WHERE v.user_voting_id ='.$userid)
		->getArrayResult();
		
	
		if(empty($qb[0]['votessum']))
			return 0;
	
		return $qb[0]['votessum'];
	
	}
	
	
	/*
	 * set answer as accepted
	*/
	public function acceptAnswer($answerid)
	{
		$rows = $this->createQueryBuilder('Voting')
		->update()
		->set('Voting.accepted', '1')
		->where('Voting.answerid = ?1')
		->setParameter(1, $answerid)
		->getQuery()->execute();
	
		return $rows;
	}
	
	/*
	 * get total votes received for questions asked by userid
	*/
	/*
	public function getTotalQuestionVotesReceived($userid)
	{
	
		$qb = $this->getEntityManager()
		->createQuery('	SELECT SUM( v.votes ) as votessum
				FROM  AristosCoreBundle:User u,  GeneralGeneralBundle:Question q, GeneralGeneralBundle:Voting v
				WHERE u.id ='.$userid.
				'AND u.id = q.user_id
				AND q.id = v.question_id')
					->getArrayResult();
	
		if(empty($qb[0]['votessum']))
			return 0;
	
		return $qb[0]['votessum'];
	
	}*/
	
}
