<?php
namespace Aristos\CoreBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use General\GeneralBundle\GeneralGeneralBundle;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
	/**
	 * 
	 * @param unknown $daysAgoRegister
	 * @return multitype:
	 */
	public function getUsersToNotify($daysAgoRegister)
	{

		$sql = 'SELECT u.email
				FROM  `user` u
				WHERE last_login is null
				and u.notReachable = false';
		
		$daysCount = count($daysAgoRegister);
		if($daysCount > 0)
		{
			$sql = $sql . " and (";
			$i = 1;
			foreach ($daysAgoRegister as $eachDay){
				$sql = $sql . " DATE(`registerDate`) = DATE_SUB(CURDATE(), INTERVAL $eachDay DAY) ";
				if($i<$daysCount)
					$sql = $sql . " OR ";
				
				$i++;
			}
			$sql = $sql . ")";
		}
		
		$em = $this->getEntityManager();
		$stmt = $em->getConnection()->prepare($sql);
		$stmt->execute();
		
		return $stmt->fetchAll();
		
	}
	
	/**
	 * get users that did not activate after some days
	 * 
	 * @param unknown $unreachableDays
	 * @return multitype:
	 */
	public function getUsersUnreachable($unreachableDays)
	{
	
		$sql = "SELECT u.email
				FROM  `user` u
				WHERE last_login is null
				and u.notReachable = false
				and DATE(`registerDate`) < DATE_SUB(CURDATE(), INTERVAL $unreachableDays DAY) ";
				
	
		$em = $this->getEntityManager();
		$stmt = $em->getConnection()->prepare($sql);
		$stmt->execute();
	
		return $stmt->fetchAll();
	
	}
	/*
	SELECT * FROM `user` 
	WHERE last_login is null
	and `notReachable` is false
	and DATE(`registerDate`) = DATE_SUB(CURDATE(), INTERVAL 1 DAY)*/
}
