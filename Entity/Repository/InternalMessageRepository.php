<?php

namespace Aristos\CoreBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Aristos\CoreBundle\AristosCoreBundle;

/**
 * InternalMessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InternalMessageRepository extends EntityRepository
{
	
	/*
	 * get messages exchanged between 2 users
	*/
	public function getMessagesBetweenUsers($params)
	{
		$qb = $this->createQueryBuilder('a')
		->select('a')
		->where("a.sender = :thirduser and a.receiver = :currentuser")
		->orWhere("a.sender = :currentuser and a.receiver = :thirduser")
		->setParameter('thirduser', $params['thirduser'])
		->setParameter('currentuser', $params['currentuser'])
		->orderBy('a.sentDate', 'DESC')
		->getQuery()
		->getResult();
	
		return $qb;
	
	}
	
	/*
	 * get ids of all users that current user exchanged messages with
	 * 
	 * @param string $params['user'] : current user
	 */
	public function getAllUserIds($params)
	{
		$ids = $this->createQueryBuilder('a')
		->select('identity(a.sender),identity(a.receiver)')
		->where("a.sender = :user")
		->orWhere('a.receiver=:user')
		->setParameter('user', $params['user'])
		->orderBy('a.sentDate', 'ASC')
		->groupBy('a.sender,a.receiver')
		->getQuery()
		->getScalarResult();
		
		$userid = array($params['user']->getId());
		
		//convert to one-dimensional flat array of ids
		$ids = array_map('current', $ids);
		
		//merge 2 arrays
		$ids = array_unique($ids);

		//remove current user_id
		$ids = array_diff($ids, $userid);		
				
		return $ids;	
	}
	
	/*
	 * get latest messages exchanged with any other user
	*/
	public function getLatestMessage($params)
	{
		/*
		//sql query
		SELECT i1.sender_id, i1.receiver_id, i1.message, i1.sentDate
		FROM  `internalmessage` i1
		left join `internalmessage` i2
		on (i1.sender_id=i2.sender_id and i1.receiver_id=i2.receiver_id and i1.sentDate < i2.sentDate)
		where ( i1.sender_id =3 OR i1.receiver_id =3 )
		and i2.sentDate IS NULL
		
		*/
		$qb = $this->getEntityManager()
            ->createQuery("SELECT identity(i1.sender) as senderid, identity(i1.receiver) as receiverid, i1.message, i1.sentDate
		FROM  AristosCoreBundle:InternalMessage i1 
		left join AristosCoreBundle:InternalMessage i2 
		with (i1.sender=i2.sender and i1.receiver=i2.receiver and i1.sentDate < i2.sentDate)
		where ( i1.sender =:user OR i1.receiver =:user )
		and i2.sentDate IS NULL
        order by i1.sentDate desc")
		->setParameter('user', $params['user'])
		->getResult();
	
		return $qb;
	
	}
	
	
	
}
